name: Terraform CI

on:
  workflow_dispatch:  # Allow manual trigger
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]
    paths:
      - '**.tf'
      - '.github/workflows/terraform-ci.yml'

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: us-west-1
  AWS_ACCOUNT_ID: 928413605543
  AWS_TERRAFORM_ROLE_NAME: TerraformGithubActionRole

jobs:
  terraform:
    name: Validate & plan
    runs-on: ubuntu-latest
    # Only run on push events or for allowed users (configure via repository variables)
    if: github.event_name == 'push' || github.actor == github.repository_owner
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Override configuration from repository variables
        run: |
          if [ -n "${{ vars.AWS_REGION }}" ]; then
            echo "AWS_REGION=${{ vars.AWS_REGION }}" >> "$GITHUB_ENV"
          fi
          if [ -n "${{ vars.AWS_ACCOUNT_ID }}" ]; then
            echo "AWS_ACCOUNT_ID=${{ vars.AWS_ACCOUNT_ID }}" >> "$GITHUB_ENV"
          fi
          if [ -n "${{ vars.AWS_TERRAFORM_ROLE_NAME }}" ]; then
            echo "AWS_TERRAFORM_ROLE_NAME=${{ vars.AWS_TERRAFORM_ROLE_NAME }}" >> "$GITHUB_ENV"
          fi

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_TERRAFORM_ROLE_NAME }}
          role-session-name: terraform-ci
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform fmt
        run: terraform fmt -recursive

      - name: Commit formatted files
        if: github.event_name == 'push'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          if ! git diff --cached --quiet; then
            git commit -m "Auto-format Terraform files"
            git push
          fi

      - name: Terraform init
        run: terraform init -input=false

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        run: terraform plan -input=false -out=tfplan.binary
        env:
          TF_VAR_github_repo: ${{ github.repository }}

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan.binary
          if-no-files-found: error

  # Apply infrastructure on merge to main
  apply:
    name: Apply infrastructure
    runs-on: ubuntu-latest
    needs: terraform
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_TERRAFORM_ROLE_NAME }}
          role-session-name: terraform-apply
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform init
        run: terraform init -input=false

      - name: Terraform apply
        run: terraform apply -auto-approve -input=false
        env:
          TF_VAR_github_repo: ${{ github.repository }}

      - name: Terraform output
        run: terraform output -json

      - name: Verify resources created
        run: |
          echo "Infrastructure deployed successfully"
          terraform state list
